{"version":3,"sources":["components/AddCategory.js","helpers/getGiph.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCatgory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGiph","category","a","url","encodeURI","fetch","resp","json","data","gifData","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGif","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAa,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACPC,mBAAS,IADF,mBACpCC,EADoC,KACxBC,EADwB,KAgB3C,OAEI,aADA,CACA,QAAMC,SAXW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAO,OACPC,MAAST,EACTU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACkCC,UAAUH,GAD5C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAUD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAcZM,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGpC,OACI,sBAAKc,UAAY,OAAjB,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAZ,SAACA,GAAc,IAAD,EAEXd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJwB,mBAE9BC,EAF8B,KAEvBC,EAFuB,KAwBrC,OAhBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAEZ,CAACpB,IAKGqB,EDZwBM,CAAY3B,GAA/Ba,EAZuB,EAY5BN,KAAaa,EAZe,EAYfA,QAEpB,OACI,qCACI,6BAAKpB,KAQHoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,gDAAf,SAEIH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADGA,EAAIC,aEUpBiB,EAxCM,WAAM,MAKa1C,mBAAS,CAAC,KALvB,mBAKhB2C,EALgB,KAKJ5C,EALI,KAgBvB,OACI,qCACI,iDACA,cAAC,EAAD,CAAYA,cAAiBA,IAC7B,uBAIA,6BAEQ4C,EAAWpB,KAAI,SAAAT,GAAQ,OAEnB,aADA,CACC,EAAD,CAEIA,SAAYA,GADLA,Y,MC3BnC8B,IAASC,OAEL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.368c9c7c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//setCategories lo tomamos desde GifExpertapp\r\nexport const AddCatgory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('') //El useState nunca puede ir vacío porque el programa no acepta un valor undefined por lo tanto hay que poner en comillas '' para que represente que es vacío.\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            //cats hace referencia al arreglo categories desde GifExpertApp.\r\n            setCategories(cats => [inputValue, ...cats ]);\r\n            setInputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        //No es necesario los símbolos del fragment <></> ya que estos sólo se utilizan para agrupar html pero el form ya lo está haciendo. \r\n        <form onSubmit = {handleSubmit}>\r\n            <input\r\n                type = 'text'\r\n                value = {inputValue}\r\n                onChange = {handleInputChange}\r\n            />          \r\n        </form>\r\n        )\r\n    \r\n}\r\n\r\nAddCatgory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGiph = async(category) => {\r\n    const url =`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=MNlqSYmBxvc2RqiV5GcTo98WROSMh4V7`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifData = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //El ? luego de imágenes sirve para verificar si la imagen existe en el arreglo.\r\n        }\r\n\r\n    });\r\n\r\n    return gifData;\r\n}","import React from 'react'\r\n\r\n//Aquí se hace una desestructuración de las propiedades de imagenes detectadas por el map en el componente GifGrid\r\nexport const GifGridItem = ({id, title, url}) => {\r\n\r\n\r\n    return (\r\n        <div className = \"card\">\r\n            <img src = {url} alt = {title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    /* useEffect(() => {\r\n        getGiph(category)\r\n            .then(setImagen)\r\n    }, [category]); */ //El arreglo vacío quiere decir que no retorna dependencias por lo que la función se va a ejecutar una sola vez en el código.\r\n                    //El arreglo ya no es vació porque se está previniento que la categoria vaya a cambiar entonces si esta cambia, este hook se va a volver a ejecutar pero si no cambia sólo se seguirá ejecutando una sola vez.\r\n                    \r\n\r\n    //const [imagen, setImagen] = useState([]);\r\n\r\n    //useFetchGif se encarga de hacer petición automáticamente cuando se cargue el componente la primera vez\r\n    const {data:images, loading} = useFetchGif(category);\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            {/* <ol>\r\n                {\r\n                    imagen.map(({id, title}) => (\r\n                        <li key={id}>{title}</li>\r\n                    ))           \r\n                }\r\n            </ol> */}\r\n            {!loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n            <div className=\"card-grid animate__animated animate__backInUp\">\r\n                {\r\n                images.map(img => (\r\n                    <GifGridItem \r\n                        key = {img.id}\r\n                        {...img} //Lo que hace es hacer cada propiedad del arreglo de las imágenes como propiedades independientes de esta forma es más óptimo trabajar\r\n                    />\r\n                ))\r\n                }\r\n            </div>\r\n           \r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react';\r\nimport { getGiph } from '../helpers/getGiph';\r\n\r\n//useFetchGif se encarga de hacer petición automáticamente cuando se cargue el componente la primera vez\r\nexport const useFetchGif = (category) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: false\r\n    });\r\n\r\n    //Este hook sirve para cargar una sola vez la información es como un do once, pero con el argumento de [category] hará una ecepción de cargar una sola vez y cargará mas contenido porque cambio la categoría  \r\n    useEffect(() => {\r\n        getGiph(category)\r\n            .then(imgs => {\r\n                //Tiempo en que tarda para cargar antes de mostrar el contenido\r\n                setTimeout(() => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: true\r\n                    })\r\n                }, 800);\r\n            })\r\n    }, [category]); //El arreglo vacío quiere decir que no retorna dependencias por lo que la función se va a ejecutar una sola vez en el código.\r\n                    //El arreglo ya no es vació porque se está previniento que la categoria vaya a cambiar entonces si esta cambia, este hook se va a volver a ejecutar pero si no cambia sólo se seguirá ejecutando una sola vez.\r\n\r\n\r\n\r\n    return state;\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport { AddCatgory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    //const [state, setstate] = useState(initialState)\r\n    //categories = ['OnePucnh', 'SamuraiX', 'DragonBall']\r\n    //const [categories, setCategories] = useState(['OnePucnh', 'SamuraiX', 'DragonBall']);\r\n    const [categories, setCategories] = useState(['']);\r\n    \r\n    /* const handleAdd = () => {\r\n        //Agrega un elemento más al arreglo\r\n        //setCategories([...categories, 'HunterSnack']); // En caso de que se quiera que el elemento se agregue al princio usamos ['HunterSnack', ...categories]\r\n\r\n\r\n        //Otro método más conveniente para hacer la linea anterior  es a partir de un callback el cual como se puede ver toma como argumento una referencia a categories y luego utiliza la función arrow.\r\n        //setCategories(cats => [...categories, 'HunterSnack']);\r\n    } */\r\n    \r\n    return (\r\n        <>\r\n            <h2>Gift Finder App</h2>\r\n            <AddCatgory setCategories = {setCategories}/>\r\n            <hr/>\r\n            \r\n            {/* <button onClick = {handleAdd}>Agregar</button> */}\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        //return <li key={category}>{category}</li>\r\n                        <GifGrid \r\n                            key = {category}\r\n                            category = {category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n    \r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp/>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}